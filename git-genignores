#!/usr/bin/env ruby

require 'net/http'
require 'optparse'

# This class holds the server information for thir application.
# The instance variables are as follows:
#  +location+:: The TLD of a server (e.g. raw.githubusercontent.com)
#  +port+:: The port with which to connect to the server
#  +ssl+:: Whether to use ssl or not
#  +format+:: The format string to use when requesting the file
#           (e.g. github/gitignores/master/%s.gitignore, default: "%s")
#  +header+:: A format string to insert before the body of the ignore file.
#  +footer+:: A format string to insert after the body of the ignore file.
class Server
  def initialize(location, port: 80, ssl: false, format: '%s', footer: '',
                 header: '')
    @location = location
    @port = port
    @ssl = ssl
    @format = format
    @header = header
    @footer = footer
  end

  def print_ignores(filetypes)
    Net::HTTP.start(@location, @port, use_ssl: @ssl) do |http|
      filetypes.each do |ft|
        res = http.request_get "/#{ String.new @format % ft }"
        if res.is_a? Net::HTTPSuccess
          puts "#{@header % ft + res.body + @footer % ft}"
        else
          $stderr.puts "Cannot find the gitignore for #{ft}."
        end
      end
    end
  end

  def check_exists(filetypes)
    Net::HTTP.start(@location, @port, use_ssl: @ssl) do |http|
      filetypes.each do |ft|
        res = http.request_head "/#{ String.new @format % ft }"
        if res.is_a? Net::HTTPSuccess
          $stdout.puts "Found gitignore for #{ft}."
        else
          $stdout.puts "Cannot find the gitignore file for #{ft}."
        end
      end
    end
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options] LANGUAGE"

  options[:capitalize] = true
  opts.on('-l', '--list',
          'Check whether the server has that particular gitignore file.') do
    options[:list] = true
  end

  opts.on('--[no-]capitalize', 'Don\'t auto capitalize.') do |cpt|
    options[:capitalize] = cpt
  end

  opts.on('-s', '--server SERVER',
          'The server to query the gitignores from') do |srv|
    options[:server] = srv
    options[:port] ||= 80
    options[:ssl] ||= false
  end

  opts.on('-p', '--port PORT', Integer, 'The port to connect on.') do |p|
    options[:port] = p
    options[:ssl] ||= false unless p == 443
  end

  opts.on('--[no-]ssl', 'Use SSL to connect to tne [SERVER]') do |s|
    options[:ssl] = s
    options[:port] ||= 443 if s
  end

  opts.on('-f', '--format FORMAT',
          'The format used to query the SERVER for the files.') do |fmt|
    options[:format] = fmt
  end

  opts.on('-h', '--header FORMAT',
          'The format string to give to the server.') do |fmt|
    options[:header] = fmt
  end

  opts.on('-t', '--footer FORMAT',
          'The format string to give to the server.') do |fmt|
    options[:footer] = fmt
  end
end.parse!

server = options[:server] || 'raw.githubusercontent.com'
format = options[:format] || 'github/gitignore/master/%s.gitignore'
header = options[:header] || "##{'-' * 71}\n# %s\n##{'-' * 71}\n"
footer = options[:footer] || ''
port = options[:port] || 443
ssl = options[:ssl] || true

args = options[:capitalize] ? ARGV.map(&:capitalize) : ARGV

server = Server.new server, port: port, ssl: ssl, format: format,
                    header: header, footer: footer

server.send(options[:list] ? :check_exists : :print_ignores, args)
